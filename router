#!/usr/bin/env python3
""" Skeleton Implementation of Project 2 for NEU CS3700 """
import argparse
import json
import select
import socket
import math

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"

##########################################################################################


class Router:
    """ Your Router """

    def __init__(self, asn, networks):
        self.asn = asn
        self.routes = {}
        self.updates = {}
        self.revokes = {}
        self.relations = {}
        self.sockets = {}
        for relationship in networks:
            network, relation = relationship.split("-")
            print("network {}, relation {}".format(network, relation))
            self.sockets[network] = socket.socket(
                socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        network = '.'.join(daddr.split('.')[:3])
        outroutes = []
        if network in self.routes:
            outroutes += self.routes[network]
        # print("finding route for {} and found {}".format(daddr, outroutes))
        return outroutes

    def lookup_peer(self, daddr):
        # peer network match
        peer_match = None
        for peer in self.relations:
            if peer.split('.')[:3] == daddr.split('.')[:3]:
                peer_match = peer
                break
        print("finding peer for {} and found {}".format(daddr, peer_match))
        return peer_match

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        outroutes = []
        shortest_length = math.inf
        for route in routes:
            if len(route['ASPath']) < shortest_length:
                shortest_length = len(route['ASPath'])
                outroutes = []
                outroutes.append(route)
            elif len(route['ASPath']) == shortest_length:
                outroutes.append(route)
        return outroutes

    def get_highest_preference(self, routes):
        """ select the route with the shortest AS Path """
        highest_pref = 0
        outroutes = []
        for route in routes:
            localpref = route['localpref']
            if localpref > highest_pref:
                outroutes = []
                outroutes.append(route)
                highest_pref = localpref
            elif localpref == highest_pref:
                outroutes.append(route)

        return outroutes

    def get_self_origin(self, routes):
        """ select self originating routes """
        outroutes = []
        for route in routes:
            if route['selfOrigin']:
                outroutes.append(route)
        if not outroutes:
            return routes
        else:
            return outroutes

    def get_origin_routes(self, routes):
        """ select origin routes: IGP > EGP > UNK """
        outroutes = []
        origin_order = {"IGP": 0, "EGP": 1, "UNK": 2}
        best_origin = "UNK"
        for route in routes:
            origin = route['origin']
            if origin_order[origin] < origin_order[best_origin]:
                outroutes = []
                outroutes.append(route)
                best_origin = origin
            elif origin == best_origin:
                outroutes.append(route)
        return outroutes

    def sum_ip(self, ip_address):
        ip_sum = 0
        power = 0
        segments = ip_address.split('.')
        for segment in segments:
            ip_sum += int(segment) * (2**power)
            power += 8

        return ip_sum

    def get_lowest_ip_neighbor(self, routes):
        outroute = None
        lowest_ip_address = math.inf
        for route in routes:
            ip_sum = self.sum_ip(route['peer'])
            if ip_sum < lowest_ip_address:
                outroute = route
                lowest_ip_address = ip_sum

        return outroute

    def filter_relationships(self, srcif, route):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        # check if either src or dst of packet is customer
        outroute = None
        if (self.relations[srcif] == 'cust' or
                self.relations[route['peer']] == 'cust'):
            outroute = route
        return outroute

    def longest_prefix_matching(self, daddr, network_ip):
        # split dst and key by . => convert each chunk into binary
        match_length = 0
        bin_daddr = ''
        bin_network_ip = ''

        daddr_arr = daddr.split('.')
        for chunk in daddr_arr:
            chunk_str = bin(int(chunk))[2:]
            bin_daddr += chunk_str.zfill(8)

        network_arr = network_ip.split('.')
        for chunk in network_arr:
            chunk_str = bin(int(chunk))[2:]
            bin_network_ip += chunk_str.zfill(8)

        for i, char in enumerate(bin_daddr):
            if char == bin_network_ip[i]:
                match_length += 1

        print("dst {}, network {}, length {}".format(
            bin_daddr, bin_network_ip, match_length))

        return match_length

    def get_longest_prefix(self, daddr, routes):
        """ select the route with the shortest AS Path """
        longest_match = 0
        network_matches = []
        for network_ip in self.routes:
            prefix_match_length = self.longest_prefix_matching(
                daddr, network_ip + ".0")
            if prefix_match_length > longest_match:
                network_matches = []
                network_matches.append(network_ip)
                longest_match = prefix_match_length
            elif prefix_match_length == longest_match:
                network_matches.append(network_ip)

        outroutes = []
        for network_match in network_matches:
            outroutes += self.routes[network_match]

        print("prefix matched {}".format(outroutes))

        return outroutes

    def get_route(self, srcif, daddr):
        """ Select the best route for a given address """
        peer = self.lookup_peer(daddr)
        routes = None
        if not peer:
            routes = self.lookup_routes(daddr)
        print(routes)
        # Rules go here
        if routes:
            # 0: longest prefix matching
            routes = self.get_longest_prefix(daddr, routes)
            # 1. Highest Preference
            routes = self.get_highest_preference(routes)
            print("pref {}".format(routes))
            # 2. Self Origin
            routes = self.get_self_origin(routes)
            print("self origin {}".format(routes))
            # 3. Shortest ASPath
            routes = self.get_shortest_as_path(routes)
            print("as_path {}".format(routes))
            # 4. EGP > IGP > UNK
            routes = self.get_origin_routes(routes)
            print("origin_routes {}".format(routes))
            # 5. Lowest IP Address
            route = self.get_lowest_ip_neighbor(routes)
            print("lowest ip {}".format(route))
            # Final check: enforce peering relationships
            route = self.filter_relationships(srcif, route)

        if peer:
            print("sending to peer: {}".format(peer))
            return peer
        elif route:
            return route['peer']
        else:
            return None

    def forward(self, srcif, packet):
        """ Forward a data packet """
        print("Attempting to forward {} to {}".format(packet, srcif))
        self.sockets[srcif].sendall(json.dumps(packet).encode('ascii'))
        return False

    def coalesce(self):
        """ coalesce any routes that are right next to each other """
        # TODO (this is the most difficult task, save until last)
        return False

    def update(self, srcif, packet):
        """ handle update packets """
        print("Updating {} with {}".format(srcif, packet))

        # saving copy
        if srcif not in self.updates:
            self.updates[srcif] = []
        self.updates[srcif].append(packet)

        # saving to forwarding table
        src_ip = packet['src']
        dst_ip = packet['dst']
        msg = packet['msg']
        # updating AS path
        msg['ASPath'].append(self.asn)
        network = msg['network']
        netmask = msg['netmask']
        localpref = msg['localpref']
        selfOrigin = msg['selfOrigin']
        ASPath = msg['ASPath']
        origin = msg['origin']

        route_entry = {}
        route_entry['netmask'] = netmask
        route_entry['peer'] = src_ip
        route_entry['localpref'] = localpref
        route_entry['selfOrigin'] = selfOrigin
        route_entry['ASPath'] = ASPath
        route_entry['origin'] = origin
        network = '.'.join(network.split('.')[:3])
        if network not in self.routes:
            self.routes[network] = []
        self.routes[network].append(route_entry)
        # print("Added {} to {} forwarding table".format(route_entry, network))

        # sending copy to neighbors
        if self.relations[srcif] == 'cust':
            # send to all other neighbors not in same network
            for neighbor in self.relations:
                if (neighbor.split('.')[:3] != srcif.split('.')[:3]):
                    packet['dst'] = neighbor
                    packet['src'] = neighbor[:-1] + '1'
                    self.forward(neighbor, packet)
        else:
            # send to customers
            for neighbor in self.relations:
                if self.relations[neighbor] == 'cust':
                    packet['dst'] = neighbor
                    packet['src'] = neighbor[:-1] + '1'
                    self.forward(neighbor, packet)
        return False

    def extract_network(self, address):
        return '.'.join(address.split('.')[:3])

    def revoke(self, packet):
        """ handle revoke packets """
        src = packet['src']
        msg = packet['msg']

        print("Revoking for {}".format(src))
        # save copy
        if src not in self.revokes:
            self.revokes[src] = []
        self.revokes[src].append(packet)

        # update forwarding table
        for revoke_msg in msg:
            revoked_network = self.extract_network(revoke_msg['network'])
            print("Revoking {} with {}".format(revoke_msg, revoked_network))
            if revoked_network in self.routes:
                newRoutes = []
                for route in self.routes[revoked_network]:
                    if not route['peer'] == src:
                        print("keeping {}".format(route))
                        newRoutes.append(route)
                self.routes[revoked_network] = newRoutes

        # echo to neighbors
        # sending copy to neighbors
        if self.relations[src] == 'cust':
            # send to all other neighbors not in same network
            for neighbor in self.relations:
                if (neighbor.split('.')[:3] != src.split('.')[:3]):
                    packet['dst'] = neighbor
                    packet['src'] = neighbor[:-1] + '1'
                    self.forward(neighbor, packet)
        else:
            # send to customers
            for neighbor in self.relations:
                if self.relations[neighbor] == 'cust':
                    packet['dst'] = neighbor
                    packet['src'] = neighbor[:-1] + '1'
                    self.forward(neighbor, packet)

        return True

    def ip_distance(self, ip1, ip2):
        distance = 0
        bin_ip1 = ''
        bin_ip2 = ''

        ip1_arr = ip1.split('.')
        for chunk in ip1_arr:
            chunk_str = bin(int(chunk))[2:]
            bin_ip1 += chunk_str.zfill(8)

        ip2_arr = ip2.split('.')
        for chunk in ip2_arr:
            chunk_str = bin(int(chunk))[2:]
            bin_ip2 += chunk_str.zfill(8)
        
        for i in range(len(bin_ip1)):
            if bin_ip1[i] != bin_ip2[i]:
                distance += 1
        
        return distance

    def aggregate_helper(self, rows):
        smallest_sum = math.inf
        smallest_ip_index = None
        for i in range(len(rows)):
            if self.sum_ip(rows[i]['network']) < smallest_sum:
                smallest_sum = self.sum_ip(rows[i]['network'])
                smallest_ip_index = i

        return rows[smallest_ip_index]

    def aggregate(self, table):
        print('aggregating {}'.format(table))
        aggregated_table = []
        seen = []
        for i in range(len(table)):
            if i not in seen:
                seen.append(i)
                row = table[i]
                print("row: {}".format(row))
                row_matches = []
                row_matches.append(row)
                for j in range(i, len(table)):
                    if j not in seen:
                        potential_match = table[j]
                        if (row['netmask'] == potential_match['netmask'] and
                            row['localpref'] == potential_match['localpref'] and
                            row['selfOrigin'] == potential_match['selfOrigin'] and
                            row['ASPath'] == potential_match['ASPath'] and
                            row['origin'] == potential_match['origin'] and
                                (self.ip_distance(row['network'], potential_match['network']) <= 1)):
                            seen.append(j)
                            row_matches.append(potential_match)
                            aggregated_table.append(self.aggregate_helper(row_matches))
        print("aggregated: {}".format(aggregated_table))
        return aggregated_table

    def dump(self, packet):
        """ handles dump table requests """
        predump = []
        for network in self.routes:
            for route in self.routes[network]:
                predump_entry = {}
                predump_entry['network'] = network + '.0'
                predump_entry['netmask'] = route['netmask']
                predump_entry['peer'] = route['peer']
                predump_entry['localpref'] = route['localpref']
                predump_entry['selfOrigin'] = route['selfOrigin']
                predump_entry['ASPath'] = route['ASPath']
                predump_entry['origin'] = route['origin']
                predump.append(predump_entry)
        
        dump = self.aggregate(predump)
        # dump = []
        # for network in self.routes:
        #     for route in self.routes[network]:
        #         dump_entry = {}
        #         dump_entry['network'] = network + '.0'
        #         dump_entry['netmask'] = route['netmask']
        #         dump_entry['peer'] = route['peer']
        #         dump.append(dump_entry)

        msg = {}
        source = packet['dst']
        msg['src'] = packet['dst']
        msg['dst'] = source
        msg['type'] = 'table'
        msg['msg'] = dump

        print('Dumping: {}'.format(msg))
        return msg

    def handle_data(self, srcif, packet):
        peer_address = self.get_route(srcif, packet['dst'])
        if peer_address:
            self.forward(peer_address, packet)
        else:
            # no route or source and dest are peer/provider, send no route back
            dst = packet['dst']
            src = packet['src']
            packet['type'] = "no route"
            packet['dst'] = src
            packet['src'] = self.extract_network(srcif) + ".1"
            packet['msg'] = {}
            self.forward(srcif, packet)

    def handle_packet(self, srcif, packet):
        """ dispatches a packet """
        print("\n ========================================================================================")
        print("Received packet from {}\n packet {}".format(srcif, packet))
        if packet['type'] == 'update':
            self.update(srcif, packet)
        elif packet['type'] == 'dump':
            msg = self.dump(packet)
            self.forward(srcif, msg)
        elif packet['type'] == 'data':
            self.handle_data(srcif, packet)
        elif packet['type'] == 'revoke':
            self.revoke(packet)

        return False

    def send_error(self, conn, msg):
        """ Send a no_route error message """
        # TODO
        return

    def run(self):
        """ main loop for the router """
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock
                    msg = json.loads(k)
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
                else:
                    return


if __name__ == "__main__":
    PARSER = argparse.ArgumentParser(description='route packets')
    PARSER.add_argument('asn', type=int)
    PARSER.add_argument('networks', metavar='networks',
                        type=str, nargs='+', help="networks")
    ARGS = PARSER.parse_args()
    Router(ARGS.asn, ARGS.networks).run()
